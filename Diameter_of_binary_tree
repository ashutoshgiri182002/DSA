/*

Question: Find the diameter of the binary tree . dimeter is defined
as the largest distance between any two nodes of the tree.

*/

#include<iostream>
#include<queue>
using namespace std;

class node{
public:
   int data;
   node* left;
   node* right;

   node(int d){
     data =d;
     left = NULL;
     right = NULL;
   }
};

node* builTree(){
  int d;
  cin>>d;
  if(d==-1){
    return NULL;
  }
  node* n = new node(d);
  n->left = builTree();
  n->right = builTree();

  return n;
}

//input: 1,2,4,-1,-1,5,7,-1,-1,-1,3,-1,6,-1,-1

/*Expected output
 1
 2 3
 4 5 6
 7
*/

void levelOrderPrint(node*root){
  queue<node*> q;
  q.push(root);
  q.push(NULL);
  while(!q.empty()){
    node* temp = q.front();
    if(temp==NULL){
      cout<<endl;
      q.pop();
      //insert a new null for the next level
      if(!q.empty()){
        q.push(NULL);
      }
    }
    else{
      q.pop();
      cout<<temp->data<<" ";
      if(temp->left){
        q.push(temp->left);
      }
      if(temp->right){
        q.push(temp->right);
      }
    }
  }

  return;
}


//helper function : height of the tree
int height(node* root){
  if(root==NULL){
    return 0;
  }
  int h1 = height(root->left);
  int h2 = height(root->right);
  return 1 + max(h1,h2);
}

//dimeter
//Time Complexity ? --> O(N*N)
int diameter(node * root){
  //base
  if(root==NULL){
    return 0;
  }
  //rec
  int D1 = height(root->left) + height(root->right);
  int D2 = diameter(root->left);
  int D3 = diameter(root->right);

  return max(D1,max(D2,D3));
}


//------Diameter Optimise

class HDPair{
public:
  int height;
  int diameter;

};

HDPair optiDiamter(node*root){
  HDPair p;

  if(root==NULL){
    p.height = p.diameter = 0;
    return p;
  }

  //otherwise
  HDPair Left = optiDiamter(root->left);
  HDPair Right = optiDiamter(root->right);

  p.height = max(Left.height,Right.height) + 1;

  int D1 = Left.height + Right.height;
  int D2 = Left.diameter;
  int D3 = Right.diameter;

  p.diameter = max(D1,max(D2,D3));
  return p;


}



int main(){

node* root = builTree();
cout<<"Your level Order print is :"<<endl;
levelOrderPrint(root);

cout<<"Diameter is " <<diameter(root)<<endl;

cout<<"Opt Diameter is "<<optiDiamter(root).diameter<<endl;

return 0;
}
